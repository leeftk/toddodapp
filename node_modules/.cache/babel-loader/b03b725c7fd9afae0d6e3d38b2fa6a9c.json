{"ast":null,"code":"var _jsxFileName = \"/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3'; //import TruffleContract from \"truffle-contract\";\n\nimport Todo from \"./build/contracts/Todo.json\";\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\nconsole.log(web3.eth.getAccounts());\nconsole.log(web3.eth.accounts[0]);\n\nclass List extends Component {\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n    const accounts = await web3.eth.getAccounts();\n    this.setState({\n      account: accounts[0]\n    }); //var todo = web3.eth.contract(PASTE ABI HERE!);\n    //const todo = web3.eth.Contract(Todo.abi,networkData.address)\n    // const todo = TruffleContract(Todo);\n    // todo.setProvider(web3.currentProvider);\n    // console.log(todo)\n\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Todo.networks[networkId];\n    const instance = new web3.eth.Contract(Todo.abi, deployedNetwork && deployedNetwork.address);\n    console.log(instance);\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.onClearList = () => {\n      this.setState({\n        list: []\n      });\n    };\n\n    this.addTask = () => {\n      this.setState({\n        list: [...this.state.list, this.state.name]\n      });\n    };\n\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\",\n      account: ''\n    };\n    this.changeText = this.changeText.bind(this);\n  }\n\n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"cardbodies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, \"Things to do:\", this.state.account), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, this.todos = this.state.list.map(post => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, \" \", post, \" \"))), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"task\",\n      onChange: this.changeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \" \", \"Add Task\", \" \"), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.onClearList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \" \", \"Clear List\"));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js"],"names":["React","Component","Button","Card","Web3","Todo","web3","givenProvider","eth","getAccounts","then","console","log","accounts","List","componentWillMount","loadBlockchainData","setState","account","networkId","net","getId","deployedNetwork","networks","instance","Contract","abi","address","constructor","props","onClearList","list","addTask","state","name","task","changeText","bind","event","target","value","render","todos","map","post"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\n//import TruffleContract from \"truffle-contract\";\nimport Todo from \"./build/contracts/Todo.json\";\n\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\n\nconsole.log(web3.eth.getAccounts())\nconsole.log(web3.eth.accounts[0])\n\n\n\nclass List extends Component {\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n  async loadBlockchainData() {\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    //var todo = web3.eth.contract(PASTE ABI HERE!);\n//const todo = web3.eth.Contract(Todo.abi,networkData.address)\n    \n\n\n    // const todo = TruffleContract(Todo);\n    // todo.setProvider(web3.currentProvider);\n    // console.log(todo)\n\n    const networkId = await web3.eth.net.getId();\n    const deployedNetwork = Todo.networks[networkId];\n    const instance = new web3.eth.Contract(\n      Todo.abi,\n      deployedNetwork && deployedNetwork.address,\n\n\n    )\n\n    console.log(instance)\n}\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\",\n      account: ''\n    };\n    this.changeText = this.changeText.bind(this);\n    \n\n  }\n \n\n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n  onClearList = () => {\n    this.setState({\n      list: []\n    });\n  };\n  addTask = () => {\n    this.setState({\n      list: [...this.state.list, this.state.name]\n    });\n    \n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Card className=\"cards\">\n          <Card.Body className=\"cardbodies\">\n            <h1>Things to do:{this.state.account}</h1>\n            <ol>\n              {(this.todos = this.state.list.map(post => <li> {post} </li>))}\n            </ol>\n            <form>\n              <input type=\"text\" id=\"task\" onChange={this.changeText} />\n            </form>\n          </Card.Body>\n        </Card>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.addTask}\n        >\n          {\" \"}\n          Add Task{\" \"}\n        </Button>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.onClearList}\n        >\n          {\" \"}\n          Clear List\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}