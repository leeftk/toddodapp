{"ast":null,"code":"var _jsxFileName = \"/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nimport Todo from \"./build/contracts/Todo.json\";\nimport TruffleContract from \"truffle-contract\";\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\nconsole.log(web3.eth.getAccounts());\nconsole.log(web3.eth.accounts[0]);\nconst TODO_LIST_ADDRESS = \"0x0B95331dB094e55F7D7f43FE0C078B6b72fF7F25\";\nconst Todo_abi_address = [{\n  \"constant\": true,\n  \"inputs\": [],\n  \"name\": \"taskCount\",\n  \"outputs\": [{\n    \"name\": \"\",\n    \"type\": \"uint256\"\n  }],\n  \"payable\": false,\n  \"stateMutability\": \"view\",\n  \"type\": \"function\"\n}, {\n  \"constant\": false,\n  \"inputs\": [{\n    \"name\": \"_content\",\n    \"type\": \"string\"\n  }],\n  \"name\": \"createTask\",\n  \"outputs\": [],\n  \"payable\": false,\n  \"stateMutability\": \"nonpayable\",\n  \"type\": \"function\"\n}];\n\nclass List extends Component {\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  async loadBlockchainData() {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        account: accounts[0]\n      }); //load web3 network ID got connect to right blockchain\n\n      const networkId = await web3.eth.net.getId(); //put that network ID in networks method\n\n      const deployedNetwork = Todo.networks[networkId]; //create variable for contract \n\n      const toDo = new web3.eth.Contract(Todo.abi, TODO_LIST_ADDRESS);\n      console.log(toDo);\n      const taskCount = await toDo.deployed().test;\n      console.log(taskCount);\n      this.setState({\n        taskCount\n      }); // console.log(instance)\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      // alert(\n      //   `Failed to load web3, accounts, or contract. Check console for details.`,\n      // );\n      console.error(error);\n    }\n  }\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n  //   // Stores a given value, 5 by default.\n  //   await this.state.instance.methods.createTask(\"task\").send({ from: accounts[0] });\n  //   // Get the value from the contract to prove it worked.\n  //   const response = await contract.methods.get().call();\n  //   // Update state with the result.\n  //   this.setState({ list:[{response}]  });\n  //   console.log(this.state.response)\n  // };\n  constructor(props) {\n    super(props); //Sets initial state for the todo list\n\n    this.onClearList = () => {\n      this.setState({\n        list: []\n      });\n    };\n\n    this.addTask = () => {\n      this.setState({\n        list: [...this.state.list, this.state.name]\n      });\n    };\n\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\",\n      account: '',\n      taskCount: 0\n    };\n    this.changeText = this.changeText.bind(this);\n  } //gets the string from the user input\n\n\n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  } //resets the list back to an empty array\n\n\n  // createTask(task){\n  //   this.state.instance.methods.createTask(\"task\").send({ from: this.state.accounts[0] });\n  //   this.state.instance.methods.createTask(\"task\").call();\n  //   //console.log(receipt)\n  // }\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"cardbodies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"Things to do:\", this.state.account), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152\n      },\n      __self: this\n    }, this.todos = this.state.list.map(post => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \" \", post, \" \"))), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"task\",\n      onChange: this.changeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, \" \", \"Add Task\", \" \"), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.onClearList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, \" \", \"Clear List\"));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js"],"names":["React","Component","Button","Card","Web3","Todo","TruffleContract","web3","givenProvider","eth","getAccounts","then","console","log","accounts","TODO_LIST_ADDRESS","Todo_abi_address","List","componentWillMount","loadBlockchainData","setState","account","networkId","net","getId","deployedNetwork","networks","toDo","Contract","abi","taskCount","deployed","test","error","constructor","props","onClearList","list","addTask","state","name","task","changeText","bind","event","target","value","render","todos","map","post"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nimport Todo from \"./build/contracts/Todo.json\";\nimport TruffleContract from \"truffle-contract\";\n\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\n\nconsole.log(web3.eth.getAccounts())\nconsole.log(web3.eth.accounts[0])\nconst TODO_LIST_ADDRESS =\"0x0B95331dB094e55F7D7f43FE0C078B6b72fF7F25\"\nconst Todo_abi_address = [\n  {\n    \"constant\": true,\n    \"inputs\": [],\n    \"name\": \"taskCount\",\n    \"outputs\": [\n      {\n        \"name\": \"\",\n        \"type\": \"uint256\"\n      }\n    ],\n    \"payable\": false,\n    \"stateMutability\": \"view\",\n    \"type\": \"function\"\n  },\n  {\n    \"constant\": false,\n    \"inputs\": [\n      {\n        \"name\": \"_content\",\n        \"type\": \"string\"\n      }\n    ],\n    \"name\": \"createTask\",\n    \"outputs\": [],\n    \"payable\": false,\n    \"stateMutability\": \"nonpayable\",\n    \"type\": \"function\"\n  }\n]\n\nclass List extends Component {\n  \n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n  \n  async loadBlockchainData() {\n    try{\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    //load web3 network ID got connect to right blockchain\n    const networkId = await web3.eth.net.getId();\n    //put that network ID in networks method\n    const deployedNetwork = Todo.networks[networkId];\n    //create variable for contract \n    const toDo = new web3.eth.Contract(\n      Todo.abi,\n     TODO_LIST_ADDRESS\n    )\n    console.log(toDo)\n    \n\n  \n    const taskCount = await toDo.deployed().test\n    console.log(taskCount)\n    this.setState({taskCount})\n\n\n     // console.log(instance)\n     } catch (error) {\n        // Catch any errors for any of the above operations.\n        // alert(\n        //   `Failed to load web3, accounts, or contract. Check console for details.`,\n        // );\n        console.error(error);\n      }\n    };\n    // runExample = async () => {\n    //   const { accounts, contract } = this.state;\n  \n    //   // Stores a given value, 5 by default.\n    //   await this.state.instance.methods.createTask(\"task\").send({ from: accounts[0] });\n  \n    //   // Get the value from the contract to prove it worked.\n    //   const response = await contract.methods.get().call();\n      \n    //   // Update state with the result.\n    //   this.setState({ list:[{response}]  });\n    //   console.log(this.state.response)\n     \n    // };\n  constructor(props) {\n    super(props);\n    //Sets initial state for the todo list\n          this.state = {\n            list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n            task: \"\",\n            account: '',\n            taskCount: 0\n          };\n          this.changeText = this.changeText.bind(this);\n          \n        }\n\n        \n \n        //gets the string from the user input\n        changeText(event) {\n          this.setState({\n            name: event.target.value\n          });\n        }\n        //resets the list back to an empty array\n        onClearList = () => {\n          this.setState({\n            list: []\n          });\n        };\n        //adds task from the value given\n        addTask = () => {\n          this.setState({\n            list: [...this.state.list, this.state.name]\n          });\n          \n        };\n        // createTask(task){\n        //   this.state.instance.methods.createTask(\"task\").send({ from: this.state.accounts[0] });\n        //   this.state.instance.methods.createTask(\"task\").call();\n        //   //console.log(receipt)\n        // }\n\n\n\n    \n  \n  \n  render() {\n    return (\n      <div className=\"main\">\n        <Card className=\"cards\">\n          <Card.Body className=\"cardbodies\">\n            <h1>Things to do:{this.state.account}</h1>\n            <ol>\n              {(this.todos = this.state.list.map(post => <li> {post} </li>))}\n            </ol>\n            <form>\n              <input type=\"text\" id=\"task\" onChange={this.changeText} />\n            </form>\n          </Card.Body>\n        </Card>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.addTask}\n        >\n          {\" \"}\n          Add Task{\" \"}\n        </Button>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.onClearList}\n        >\n          {\" \"}\n          Clear List\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}