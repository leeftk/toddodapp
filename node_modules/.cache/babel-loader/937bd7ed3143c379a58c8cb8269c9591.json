{"ast":null,"code":"var _jsxFileName = \"/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nimport Todo from \"./build/contracts/Todo.json\";\nimport TruffleContract from \"truffle-contract\";\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\nconsole.log(web3.eth.getAccounts());\nconsole.log(web3.eth.accounts[0]);\nconst TODO_LIST_ADDRESS = \"0x0B95331dB094e55F7D7f43FE0C078B6b72fF7F25\";\n\nclass List extends Component {\n  // async loadBlockchainData() {\n  //   try{\n  //   const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n  //   const accounts = await web3.eth.getAccounts()\n  //   this.setState({ account: accounts[0] })\n  //   //load web3 network ID got connect to right blockchain\n  //   const networkId = await web3.eth.net.getId();\n  //   //put that network ID in networks method\n  //   const deployedNetwork = Todo.networks[networkId];\n  //   //create variable for contract \n  //   // const toDo = new web3.eth.Contract(\n  //   //   Todo.abi,\n  //   //   deployedNetwork && TODO_LIST_ADDRESS,\n  //   // )\n  //   const taskCount = await toDo.methods.taskCount().call();\n  //   this.setState({taskCount})\n  //    // console.log(instance)\n  //    } catch (error) {\n  //       // Catch any errors for any of the above operations.\n  //       alert(\n  //         `Failed to load web3, accounts, or contract. Check console for details.`,\n  //       );\n  //       console.error(error);\n  //     }\n  //   };\n  constructor(props) {\n    super(props); //Sets initial state for the todo list\n\n    this.onClearList = () => {\n      this.setState({\n        list: []\n      });\n    };\n\n    this.addTask = () => {\n      this.setState({\n        list: [...this.state.list, this.state.name]\n      });\n    };\n\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\",\n      account: '',\n      taskCount: 0\n    };\n    this.changeText = this.changeText.bind(this);\n  } //gets the string from the user input\n\n\n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  } //resets the list back to an empty array\n\n\n  // createTask(task){\n  //   this.state.instance.methods.createTask(\"task\").send({ from: this.state.accounts[0] });\n  //   this.state.instance.methods.createTask(\"task\").call();\n  //   //console.log(receipt)\n  // }\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"cardbodies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, \"Things to do:\", this.state.account), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, this.todos = this.state.list.map(post => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \" \", post, \" \"))), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"task\",\n      onChange: this.changeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, \" \", \"Add Task\", \" \"), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.onClearList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \" \", \"Clear List\"));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js"],"names":["React","Component","Button","Card","Web3","Todo","TruffleContract","web3","givenProvider","eth","getAccounts","then","console","log","accounts","TODO_LIST_ADDRESS","List","constructor","props","onClearList","setState","list","addTask","state","name","task","account","taskCount","changeText","bind","event","target","value","componentWillMount","loadBlockchainData","render","todos","map","post"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nimport Todo from \"./build/contracts/Todo.json\";\nimport TruffleContract from \"truffle-contract\";\n\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\n\nconsole.log(web3.eth.getAccounts())\nconsole.log(web3.eth.accounts[0])\nconst TODO_LIST_ADDRESS =\"0x0B95331dB094e55F7D7f43FE0C078B6b72fF7F25\"\n\n\nclass List extends Component {\n  // async loadBlockchainData() {\n  //   try{\n  //   const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n  //   const accounts = await web3.eth.getAccounts()\n  //   this.setState({ account: accounts[0] })\n  //   //load web3 network ID got connect to right blockchain\n  //   const networkId = await web3.eth.net.getId();\n  //   //put that network ID in networks method\n  //   const deployedNetwork = Todo.networks[networkId];\n  //   //create variable for contract \n  //   // const toDo = new web3.eth.Contract(\n  //   //   Todo.abi,\n  //   //   deployedNetwork && TODO_LIST_ADDRESS,\n  //   // )\n  //   const taskCount = await toDo.methods.taskCount().call();\n  //   this.setState({taskCount})\n\n\n  //    // console.log(instance)\n  //    } catch (error) {\n  //       // Catch any errors for any of the above operations.\n  //       alert(\n  //         `Failed to load web3, accounts, or contract. Check console for details.`,\n  //       );\n  //       console.error(error);\n  //     }\n  //   };\n\n  constructor(props) {\n    super(props);\n    //Sets initial state for the todo list\n          this.state = {\n            list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n            task: \"\",\n            account: '',\n            taskCount: 0\n          };\n          this.changeText = this.changeText.bind(this);\n          \n        }\n\n        \n \n        //gets the string from the user input\n        changeText(event) {\n          this.setState({\n            name: event.target.value\n          });\n        }\n        //resets the list back to an empty array\n        onClearList = () => {\n          this.setState({\n            list: []\n          });\n        };\n        //adds task from the value given\n        addTask = () => {\n          this.setState({\n            list: [...this.state.list, this.state.name]\n          });\n          \n        };\n        // createTask(task){\n        //   this.state.instance.methods.createTask(\"task\").send({ from: this.state.accounts[0] });\n        //   this.state.instance.methods.createTask(\"task\").call();\n        //   //console.log(receipt)\n        // }\n\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n\n    \n  \n  \n  render() {\n    return (\n      <div className=\"main\">\n        <Card className=\"cards\">\n          <Card.Body className=\"cardbodies\">\n            <h1>Things to do:{this.state.account}</h1>\n            <ol>\n              {(this.todos = this.state.list.map(post => <li> {post} </li>))}\n            </ol>\n            <form>\n              <input type=\"text\" id=\"task\" onChange={this.changeText} />\n            </form>\n          </Card.Body>\n        </Card>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.addTask}\n        >\n          {\" \"}\n          Add Task{\" \"}\n        </Button>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.onClearList}\n        >\n          {\" \"}\n          Clear List\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}