{"ast":null,"code":"var _jsxFileName = \"/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nimport Todo from \"./build/contracts/Todo.json\";\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\nconsole.log(web3.eth.getAccounts());\nconsole.log(web3.eth.accounts[0]);\n\nclass List extends Component {\n  async loadBlockchainData() {\n    try {\n      const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n      const accounts = await web3.eth.getAccounts();\n      this.setState({\n        account: accounts[0]\n      }); //load web3 network ID got connect to right blockchain\n\n      const networkId = await web3.eth.net.getId(); //put that network ID in networks method\n\n      const deployedNetwork = Todo.networks[networkId]; //create variable for contract \n\n      const toDo = new web3.eth.Contract(Todo.abi, deployedNetwork && deployedNetwork.address);\n      const createTask = await toDo.methods.createTask().call();\n      this.setState({\n        instance\n      });\n      console.log(instance);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n      console.error(error);\n    }\n  }\n\n  // runExample = async () => {\n  //   const { accounts, contract } = this.state;\n  //   // Stores a given value, 5 by default.\n  //   await this.state.instance.methods.createTask(\"task\").send({ from: accounts[0] });\n  //   // Get the value from the contract to prove it worked.\n  //   const response = await contract.methods.get().call();\n  //   // Update state with the result.\n  //   this.setState({ list:[{response}]  });\n  //   console.log(this.state.response)\n  // };\n  constructor(props) {\n    super(props); //Sets initial state for the todo list\n\n    this.onClearList = () => {\n      this.setState({\n        list: []\n      });\n    };\n\n    this.addTask = () => {\n      this.setState({\n        list: [...this.state.list, this.state.name]\n      });\n    };\n\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\",\n      account: ''\n    };\n    this.changeText = this.changeText.bind(this);\n  } //gets the string from the user input\n\n\n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  } //resets the list back to an empty array\n\n\n  createTask(task) {\n    this.state.instance.methods.createTask(\"task\").send({\n      from: this.state.accounts[0]\n    });\n    this.state.instance.methods.createTask(\"task\").call(); //console.log(receipt)\n  }\n\n  componentWillMount() {\n    this.loadBlockchainData();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"cardbodies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Things to do:\", this.state.account), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, this.todos = this.state.list.map(post => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \" \", post, \" \"))), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"task\",\n      onChange: (this.changeText, this.createTask(\"hi\")),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \" \", \"Add Task\", \" \"), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.onClearList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \" \", \"Clear List\"));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js"],"names":["React","Component","Button","Card","Web3","Todo","web3","givenProvider","eth","getAccounts","then","console","log","accounts","List","loadBlockchainData","setState","account","networkId","net","getId","deployedNetwork","networks","toDo","Contract","abi","address","createTask","methods","call","instance","error","alert","constructor","props","onClearList","list","addTask","state","name","task","changeText","bind","event","target","value","send","from","componentWillMount","render","todos","map","post"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nimport Todo from \"./build/contracts/Todo.json\";\n\n\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\n\nconsole.log(web3.eth.getAccounts())\nconsole.log(web3.eth.accounts[0])\n\n\n\nclass List extends Component {\n  async loadBlockchainData() {\n    try{\n    const web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\")\n    const accounts = await web3.eth.getAccounts()\n    this.setState({ account: accounts[0] })\n    //load web3 network ID got connect to right blockchain\n    const networkId = await web3.eth.net.getId();\n    //put that network ID in networks method\n    const deployedNetwork = Todo.networks[networkId];\n    //create variable for contract \n    const toDo = new web3.eth.Contract(\n      Todo.abi,\n      deployedNetwork && deployedNetwork.address,\n    )\n    const createTask = await toDo.methods.createTask().call();\n\n    this.setState({instance})\n\n      console.log(instance)\n     } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\n          `Failed to load web3, accounts, or contract. Check console for details.`,\n        );\n        console.error(error);\n      }\n    };\n    // runExample = async () => {\n    //   const { accounts, contract } = this.state;\n  \n    //   // Stores a given value, 5 by default.\n    //   await this.state.instance.methods.createTask(\"task\").send({ from: accounts[0] });\n  \n    //   // Get the value from the contract to prove it worked.\n    //   const response = await contract.methods.get().call();\n      \n    //   // Update state with the result.\n    //   this.setState({ list:[{response}]  });\n    //   console.log(this.state.response)\n     \n    // };\n  constructor(props) {\n    super(props);\n    //Sets initial state for the todo list\n          this.state = {\n            list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n            task: \"\",\n            account: ''\n          };\n          this.changeText = this.changeText.bind(this);\n          \n        }\n\n        \n \n        //gets the string from the user input\n        changeText(event) {\n          this.setState({\n            name: event.target.value\n          });\n        }\n        //resets the list back to an empty array\n        onClearList = () => {\n          this.setState({\n            list: []\n          });\n        };\n        //adds task from the value given\n        addTask = () => {\n          this.setState({\n            list: [...this.state.list, this.state.name]\n          });\n          \n        };\n        createTask(task){\n          this.state.instance.methods.createTask(\"task\").send({ from: this.state.accounts[0] });\n          this.state.instance.methods.createTask(\"task\").call();\n          //console.log(receipt)\n        }\n\n  componentWillMount() {\n    this.loadBlockchainData()\n  }\n\n\n    \n  \n  \n  render() {\n    return (\n      <div className=\"main\">\n        <Card className=\"cards\">\n          <Card.Body className=\"cardbodies\">\n            <h1>Things to do:{this.state.account}</h1>\n            <ol>\n              {(this.todos = this.state.list.map(post => <li> {post} </li>))}\n            </ol>\n            <form>\n              <input type=\"text\" id=\"task\" onChange={this.changeText, this.createTask(\"hi\")} />\n            </form>\n          </Card.Body>\n        </Card>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.addTask}\n        >\n          {\" \"}\n          Add Task{\" \"}\n        </Button>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.onClearList}\n        >\n          {\" \"}\n          Clear List\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}