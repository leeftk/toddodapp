{"ast":null,"code":"var _jsxFileName = \"/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js\";\nimport React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\nconsole.log(web3.eth.getAccounts());\nwindow.addEventListener(\"load\", function () {\n  // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n  if (typeof web3 !== \"undefined\") {\n    // Use Mist/MetaMask's provider\n    window.web3 = new Web3(web3.currentProvider);\n  } else {\n    console.log(\"No web3? You should consider trying MetaMask!\"); // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n\n    window.web3 = new Web3(new Web3.providers.HttpProvider(\"https://localhost:8545\"));\n  } // APP >\n\n\n  web3.eth.getAccounts(function (error, accounts) {\n    if (!error) {\n      web3.eth.getBalance(accounts[0], function (error, balance) {\n        if (!error) {\n          console.log(\"Your account: \" + accounts[0] + \" has a balance of: \" + balance.toNumber() / 1000000000000000000 + \"Ether\");\n        } else {\n          console.error(error);\n        }\n      });\n    } else {\n      console.error(error);\n    }\n  });\n});\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onClearList = () => {\n      this.setState({\n        list: []\n      });\n    };\n\n    this.addTask = () => {\n      this.setState({\n        list: [...this.state.list, this.state.name]\n      });\n    };\n\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\"\n    };\n    this.changeText = this.changeText.bind(this);\n  }\n\n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"main\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Card, {\n      className: \"cards\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Card.Body, {\n      className: \"cardbodies\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Things to do\"), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.todos = this.state.list.map(post => React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \" \", post, \" \"))), React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: \"text\",\n      id: \"task\",\n      onChange: this.changeText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    })))), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.addTask,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \" \", \"Add Task\", \" \"), React.createElement(Button, {\n      className: \"buttontime\",\n      variant: \"primary\",\n      type: \"submit\",\n      onClick: this.onClearList,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \" \", \"Clear List\"));\n  }\n\n}\n\nexport default List;","map":{"version":3,"sources":["/Users/leefaria/Documents/Code/todoapp/toddodapp/src/List.js"],"names":["React","Component","Button","Card","Web3","web3","givenProvider","eth","getAccounts","then","console","log","window","addEventListener","currentProvider","providers","HttpProvider","error","accounts","getBalance","balance","toNumber","List","constructor","props","onClearList","setState","list","addTask","state","name","task","changeText","bind","event","target","value","render","todos","map","post"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Web3 from 'web3';\n\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\nweb3.eth.getAccounts().then(console.log);\n\nconsole.log(web3.eth.getAccounts())\n\n window.addEventListener(\"load\", function() {\n  // Checking if Web3 has been injected by the browser (Mist/MetaMask)\n  if (typeof web3 !== \"undefined\") {\n    // Use Mist/MetaMask's provider\n    window.web3 = new Web3(web3.currentProvider);\n  } else {\n    console.log(\"No web3? You should consider trying MetaMask!\");\n    // fallback - use your fallback strategy (local node / hosted node + in-dapp id mgmt / fail)\n    window.web3 = new Web3(\n      new Web3.providers.HttpProvider(\"https://localhost:8545\")\n    );\n  }\n\n  // APP >\n\n  web3.eth.getAccounts(function(error, accounts) {\n    if (!error) {\n      web3.eth.getBalance(accounts[0], function(error, balance) {\n        if (!error) {\n          console.log(\n            \"Your account: \" +\n              accounts[0] +\n              \" has a balance of: \" +\n              balance.toNumber() / 1000000000000000000 +\n              \"Ether\"\n          );\n        } else {\n          console.error(error);\n        }\n      });\n    } else {\n      console.error(error);\n    }\n  });\n});\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\"puta\", \"wowo\", \"i figured out how react works\", \"nice\"],\n      task: \"\"\n    };\n    this.changeText = this.changeText.bind(this);\n  }\n  \n  changeText(event) {\n    this.setState({\n      name: event.target.value\n    });\n  }\n  onClearList = () => {\n    this.setState({\n      list: []\n    });\n  };\n  addTask = () => {\n    this.setState({\n      list: [...this.state.list, this.state.name]\n    });\n    \n  };\n\n  render() {\n    return (\n      <div className=\"main\">\n        <Card className=\"cards\">\n          <Card.Body className=\"cardbodies\">\n            <h1>Things to do</h1>\n            <ol>\n              {(this.todos = this.state.list.map(post => <li> {post} </li>))}\n            </ol>\n            <form>\n              <input type=\"text\" id=\"task\" onChange={this.changeText} />\n            </form>\n          </Card.Body>\n        </Card>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.addTask}\n        >\n          {\" \"}\n          Add Task{\" \"}\n        </Button>\n        <Button\n          className=\"buttontime\"\n          variant=\"primary\"\n          type=\"submit\"\n          onClick={this.onClearList}\n        >\n          {\" \"}\n          Clear List\n        </Button>\n      </div>\n    );\n  }\n}\n\nexport default List;\n"]},"metadata":{},"sourceType":"module"}